Ryan Trosvig
MSSE Embedded Lab 2


Motor Speed
This is a warm-up exercise that does not need to be handed in. The code written and information obtained through this process will be directly applied to lab 2.
Create a program that uses PCINT to record encoder values, then uses a separate interrupt to calculate the position and speed of the motor. You need to consider the timing of this interrupt to calculate speed. Run your motor at a set "speed" and output these values to the LCD from inside main (not the interrupt).

1. What is approximately the shortest and longest period (i.e. fastest and slowest frequency) of the PCINT? You determine this by running your motor at the slowest speed possible and measuring how long it takes to rotate 360, which you can determine by the encoder count. Then you can do the same at full speed.

304ms for fastest --> 2249counts/rev * 1rev/0.304s = 7398 counts/sec
for slowest = counts/sec

2. Run the speed calculator at a frequency faster than the fastest of the PCINT. What speed do you see?

I selected 10ms for a sample period because it is slow enough to measure the speed and significantly faster than one revolution at the fastest speed of the motor.
74/75 counts/10ms 

3. Run the speed calculator very slowly (maybe at 1/10th the frequency). What speed do you see? Is it consistent? What if you slow down or speed up the motor?

74/75 counts/10ms
743-752 counts/100ms (slower is more consistent)
3734-3745 counts/500ms (slower is more consistent)

Deliverables
Hand in all of the code necessary to compile your project. Please put sufficient comments in your code so that I can follow what you are doing. Also, if your code is not working in some aspect, please include that in your report. In addition, submit a report that addresses the following:

1. Implement the controller to maintain speed
Use only P. Increase the gain to get a fast response (i.e. get to your set point quickly). Then increase it a little more to oscillate.
I tested this by setting the speed to about half of max = 36, transitioning from stopped. 
P of 0.7 or greater reset the board immediately starting from 0.
P of 0.6 worked but was not oscillating and had the following response.



I increased it to 1.0 after it was already moving and it started oscillating slightly,  then from 1.0 to 1.9 there wasn't much of a difference, then at a gain of 2 it started oscillating heavily as seen in the following graph.




Add in I. Increase the gain to get a faster response and address the steady-state error in which once the system achieves its speed, P falls back to 0 thus the speed cannot be steadily maintained. Add in more I so that it is oscillating.
I set P to 0.6 and set I to 0.5 to start with, with a lot of oscillation.  Dropped I to 0.05 which reset the board, then got I down to 0.005 with some oscillation as shown in the following graph.  It is oscillating because that small error of 1 is accumulating and causing it to jump below the setpoint which then pulls it back up to above the setpoint.


Add in D to dampen the response and eliminate oscillation.
Report on your observations.
I started D at 0.1 and didn't see much impact, then increased it to 1.5 and saw that speed was maintained well aside from the occasional hiccup.  I increased D to 3.6 which caused oscillation and the board to reset.
Restarted with an initial gain of 1.5 and the board reset, dropped it to 1.0 (same thing) then down to 0.5 which did not reset and had the following response which was actually worse than just P and I. PID(0.6, 0.005, 0.5)





2. Use your gains above to maintain a very low speed, then a very high speed. Do these gains work for both? What if you change the frequency of the speed calculation (not derived inside the interrupt but rather in the controller) to a quarter of the frequency of the encoder interrupt, then what happens to the system? (Essentially, I'm asking you to play around with the system a bit and see what the different settings do and how the system changes. If you have other questions that you are more curious about, then you can experiment with that.) Report on your observations and form some conclusions (e.g. "For the best results, the frequency 
of the controller should be set at XXX.").

The gains did work about the same for the different speeds although there was some oscillation after a period of time due to the I component, there is intial overshoot then they settle out, the overshoot is different based on how far you are changing.  The following shows multiple transitions using the gains (0.4,0.0005,1.2) 

I changed the speed calculation period to 100ms and it throws off all of the control parameters, the board resets using the above gains.  PID(0.2, 0.0005. 0) seemed to work well for the 100ms loop timing and actually seemed to work better than 10ms as can be seen in the following response curves although it is taking longer to get there, the curves just look better.  Also I think the increase in number of counts you can work with on every iteration gives you better control to dial it into the speed you want.



I found a sign error in my equation and came up with some good response using the values PID(0.4, 0.0005, 1.2) using 10ms as a control period.



3. Implement the controller to maintain position. Using a good sampling rate, tune your gains in a similar manner above, and experiment with the speed and the range of reference position.
Start with very low gains so that the motor runs very slow and takes its time getting to the set position. Take out the I term, so that you are only using a PD controller. Do you observe any undershoot?
Use high gains for positional control, so that the motor mostly runs at full speed. Observe the overshoot and see if you can adjust the gains to maintain both a high speed and not overshoot. For these "ideal" gains you determined, record the measured position, measured speed, reference position, and error. (You can do a screen dump and capture the screen output using PuTTY (or others) then import that data into Excel.) Graph the variables and describe and explain your findings.

The position controller is running at 1KHz with a 1ms period.

Started with PID(1.1,0,0) shown in the following graph with quick response but a lot of overshoot and a long settling time:

Then I tuned it down to PID(0.5,0.0005,1.5) shown in the following graph where the oscillation has been reduced greatly but still shows a lot of overshoot:


I couldn't seem to get a good response so I slowed the controller down to 100Hz and played with that a bit.  I slowed it down to 100Hz, 10ms period and tweaked the gains to get to a similar response to the one above as shown in the following plot using the gains PID(0.5,0.001,0.1)


After playing around and looking at my equation I had the sign on the D component backwards and after fixing that I came up with the following curve which came out great using 100Hz and the gains PID(0.5, 0.001, 5)


4. Determine optimally tuned values for the PID positional controller (i.e. those that achieve good control while maintaining good speed) and the optimal frequency of the controller based on above experiment. Implement the interpolator and execute the trajectory: rotate the motor forward 90 degrees, hold for .5 seconds (have the system precisely measure this time period), then rotate backwards for 360 degrees, hold for .5 seconds, rotate forwards for 5 degrees. Graph Pm, Pr and T while executing the trajectory. Be sure to graph the entire trajectory.
The above plot shows the system response with the values PID(0.4, 0.0005, 0)
Using the values from above that were working well PID(0.5, 0.001, 5) the system shuts off when transitioning from 90 to -270.

Due to the constant brown out issue on the board I added an explicit rate limiter that doesn't allow any setpoint offset more than 150 encoder counts and basically acts as a setpoint generator to protect the board.  The below graph shows the operation with the controlled interpolator with setpoint ramping.


5. Execute the same trajectory described above, except run your PD controller at a "slow" rate and at a "very slow" rate while graphing the same variables. Discuss the results.

Slow rate: 
100ms
When it was slowed down to 100ms the rate limit ramping got slower understandably and the overshoot would get worse because your sample rate is slower and it's harder to react to overcompensation although your I component will not accumulate as fast making that response different as well (this applies to both the slow and very slow rate loops)

The following plot shows the 100ms rate with the rate limiter setpoint interpolator and it almost looks like a triangle wave at this point.


Very slow rate:
500ms
The interpolator made the system go a little haywire as can be seen in the below plot.

I then removed the rate limiter and it just ended up oscillating by itself


The controller doesn't get back to send a new update until the motor has moved way beyond the setpoint and thus can't keep up.
